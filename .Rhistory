library("readGPX")
install.packages("readGPX")
install.packages("plotKML")
library("plotKML")
a <- readGPX("6a-caminada-popular-cims-dels-tres-turons.gpx")
a <- readGPX("6a-caminada-popular-cims-dels-tres-turons.gpx")
library("plotKML")
library("plotKML")
library("readGPX")
install.packages("plotKML")
install.packages("rgdal")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
install.packages("rgeos")
library("readGPX")
install.packages("readGPX")
install.packages("plotKML")
require(rgeos)
a <- readGPX("6a-caminada-popular-cims-dels-tres-turons.gpx")
library("readGPX")
library("plotKML")
install.packages("rgdal")
install.packages("rgdal")
install.packages("plotKML")
library("plotKML")
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("plotKML")
library("plotKML")
install.packages("Hmisc")
a <- readGPX("6a-caminada-popular-cims-dels-tres-turons.gpx")
library(XML)
pfile <- htmlTreeParse(file, error = function (…) {}, useInternalNodes = T)
pfile <- htmlTreeParse(file, error = function (...) {}, useInternalNodes = T)
pfile <- htmlTreeParse(file, error = function () {}, useInternalNodes = T)
file = "6a-caminada-popular-cims-dels-tres-turons.gpx"
pfile <- htmlTreeParse(file, error = function (...) {}, useInternalNodes = T)
pfile
elevations <- as.numeric(xpathSApply(pfile, path = “//trkpt/ele”, xmlValue))
coords <- xpathSApply(pfile, path = “//trkpt”, xmlAttrs)
elevations <- as.numeric(xpathSApply(pfile, path = “//trkpt/ele”, xmlValue))
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
elecations
elevations
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt, xmlAttrs)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
times
coords
lats <- as.numeric(coords[“lat”,])
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
lats
lons
geodf <- data.frame(lat = lats, lon = lons, ele = elevations, time = times)
geodf
rm(list=c("elevations", "lats", "lons", "pfile", "times", "coords"))
head(geodf)
plot(lat,lon)
plot(geodf$lat,geodf$lon)
plot(geodf$lat,geodf$lon, 'l')
plot(geodf$lon, geodf$lat, 'l')
library("plotKML")
install.packages("plotKML")
library(XML)
file = "6a-caminada-popular-cims-dels-tres-turons.gpx"
a <- readGPX("6a-caminada-popular-cims-dels-tres-turons.gpx")
install.packages("rgeos")
require(rgeos)
pfile <- htmlTreeParse(file, error = function (...) {}, useInternalNodes = T)
l
install.packages("XML")
library(XML)
install.packages("XML")
library(XML)
file = "6a-caminada-popular-cims-dels-tres-turons.gpx"
a <- readGPX("6a-caminada-popular-cims-dels-tres-turons.gpx")
pfile <- htmlTreeParse(file, error = function (...) {}, useInternalNodes = T)
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
coords
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
geodf <- data.frame(lat = lats, lon = lons, ele = elevations, time = times)
lats
lons
elevations
geodf <- data.frame(lat = lats, lon = lons, ele = elevations, time = times)
rm(list=c("elevations", "lats", "lons", "pfile", "times", "coords"))
head(geodf)
library(plotly)
plot_ly(geodf, x = lon, y = lat, z = ele, color = time, type = "scatter3d")
install.packages("plotly")
library(plotly)
plot_ly(geodf, x = lon, y = lat, z = ele, color = time, type = "scatter3d")
plot_ly(geodf, x = lon, y = lat, z = ele, type = "scatter3d")
plot_ly(geodf, x = lon, y = lat, z = ele, type = "line")
head(geodf)
plot_ly(geodf, x = lon, y = lat, z = ele, type = "line")
plot(geodf$lon, geodf$lat)
plot(geodf$lon, geodf$lat, type='l')
plot_ly(geodf, x = geodf$lon, y = geodf$lat, z = geodf$ele, type = "line")
plot_ly(geodf, x = lon, y = lat, type = "line")
l
# initiate a 100 x 3 matrix filled with zeros
m <- matrix(numeric(300), ncol = 3)
# simulate a 3D random-walk
for (i in 2:100) m[i, ] <- m[i-1, ] + rnorm(3)
# collect everything in a data-frame
df <- setNames(
data.frame(m, seq(1, 100)),
c("x", "y", "z", "time")
)
library(plotly)
plot_ly(df, x = x, y = y, z = z, color = time, type = "scatter3d")
library(plotly)
plot_ly(df, x = x, y = y, z = z, color = time, type = "scatter3d")
library(rgl)
library(rgl)
install.packages("rgl")
library(rgl)
plot3d(wt, disp, mpg, col="red", size=3)
install.packages("rgl")
(
library(rgl)
plot3d(wt, disp, mpg, col="red", size=3)
library(rgl)
plot3d(wt, disp, mpg, col="red", size=3)
plot3d((geodf$lon, geodf$lat, geodf$ele)
library(rgl)
plot3d((geodf$lon, geodf$lat, geodf$ele)
plot3d(geodf$lon, geodf$lat, geodf$ele)
plot3d(geodf$lon, geodf$lat, geodf$ele)
plot3d(geodf$lon, geodf$lat, geodf$ele, type='line')
plot3d(geodf$lon, geodf$lat, geodf$ele, type='l')
plot3d(geodf$lon, geodf$lat, geodf$ele, type='l')
plot3d(geodf$lon, geodf$lat, geodf$ele, type='p')
plot3d(geodf$lon, geodf$lat, geodf$ele, type='l')
head(geodf)
plot3d(geodf$lon, geodf$lat, geodf$ele, type='l')
library(XML)
library(rgl)
read_gpx <- function(file){
# Parse the GPX file
pfile <- htmlTreeParse(file, error = function (...) {}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
# Put everything in a dataframe and get rid of old variables
track <- data.frame(lat = lats, lon = lons, ele = elevations, time = times)
rm(list=c("elevations", "lats", "lons", "pfile", "times", "coords"))
#head(track)
return track
}
file = "6a-caminada-popular-cims-dels-tres-turons.gpx"
geodf <- read_gpx(file)
read_gpx <- function(file){
# Parse the GPX file
pfile <- htmlTreeParse(file, error = function (...) {}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
# Put everything in a dataframe and get rid of old variables
track <- data.frame(lat = lats, lon = lons, ele = elevations, time = times)
rm(list=c("elevations", "lats", "lons", "pfile", "times", "coords"))
#head(track)
return track
}
read_gpx <- function(file){
# Parse the GPX file
pfile <- htmlTreeParse(file, error = function (...) {}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
# Put everything in a dataframe and get rid of old variables
track <- data.frame(lat = lats, lon = lons, ele = elevations, time = times)
rm(list=c("elevations", "lats", "lons", "pfile", "times", "coords"))
#head(track)
return(track)
}
file = "6a-caminada-popular-cims-dels-tres-turons.gpx"
geodf <- read_gpx(file)
geodf
source("functions.R")
library(XML)
library(rgl)
source("functions.R")
######### Main ########
file = "6a-caminada-popular-cims-dels-tres-turons.gpx"
geodf <- read_gpx(file)
plot3d(geodf$lon, geodf$lat, geodf$ele, type='l')
library(XML)
library(rgl)
source("functions.R")
######### Main ########
file = "6a-caminada-popular-cims-dels-tres-turons.gpx"
geodf <- read_gpx(file)
plot3d(geodf$lon, geodf$lat, geodf$ele, type='l')
